// Section ::  libraries 
#include "pico/stdlib.h"

#include "st7735/ST7735_TFT.hpp"
#include "st7735/ST7735_TFT_Bitmap_Data.hpp"

#include "display.hpp"
#include "entity.hpp"

// Section ::  defines
#define LEFT_BUTTON 11
#define RIGHT_BUTTON 10
#define UP_BUTTON 20

// Section ::  Function Prototypes
void game(uint8_t *frameBuffer); // Test 3: boucing ball with fps counter using 16-bit color double buffering
char* fpsCounter(void); // FPS counter

//  Section ::  MAIN 
int main(void) 
{
	Setup(); //setup TFT display
	stdio_init_all(); //setup stdio

	//frame buffer, 128x160px bitmap 16-bit color horizontally addressed, 2 bytes per pixel, 40960 bytes
	uint8_t frameBuffer[SCREEN_WIDTH * SCREEN_HEIGHT * 2];
	clearScreen(frameBuffer);

	//init inputs 
	gpio_init(LEFT_BUTTON);
	gpio_set_dir(LEFT_BUTTON, GPIO_IN);
	gpio_pull_up(LEFT_BUTTON);

	gpio_init(RIGHT_BUTTON);
	gpio_set_dir(RIGHT_BUTTON, GPIO_IN);
	gpio_pull_up(RIGHT_BUTTON);

	gpio_init(UP_BUTTON);
	gpio_set_dir(UP_BUTTON, GPIO_IN);
	gpio_pull_up(UP_BUTTON);


	//start game
	game(frameBuffer);

	//should never get here unless game() exits
	while(1){
		printf("done testing\r\n");
		sleep_ms(1000);
	}

}
// *** End OF MAIN **



/*!
	@brief  Test 3: boucing ball with fps counter using 16-bit color double buffering

*/
void game(uint8_t *frameBuffer) {
	
	// ball, 15x15 bitmap 16-bit color horizontally addressed, red
	uint8_t ballBitmap[]  = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x5a, 0x08, 0x42, 
  0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x5a, 0x08, 0x5a, 0x08, 0x42, 
  0x28, 0xb1, 0x46, 0x42, 0x28, 0x42, 0x28, 0x5a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0xb1, 0x46, 0x42, 
  0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0xb1, 0x46, 0x42, 0x28, 0x42, 
  0x28, 0xe8, 0xe4, 0x42, 0x28, 0xb1, 0x46, 0x42, 0x28, 0x5a, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0xe8, 
  0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x42, 0x28, 0xb1, 0x46, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 
  0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0xe8, 0xe4, 0xe8, 
  0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0xb1, 0x46, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 
  0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x5a, 0x08, 0x42, 0x28, 0xe8, 
  0xe4, 0xe8, 0xe4, 0xe8, 0xe4, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 
  0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0xb1, 0x46, 0x42, 0x28, 0x42, 0x28, 0x42, 
  0x28, 0xe8, 0xe4, 0x42, 0x28, 0x5a, 0x08, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 
  0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0xb1, 0x46, 0xb1, 
  0x46, 0xb9, 0x25, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 
  0x28, 0x5a, 0x08, 0x42, 0x28, 0xb1, 0x46, 0xb1, 0x46, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 
  0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 
  0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x28, 0x42, 0x28, 0x42, 
  0x28, 0x42, 0x28, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

	//create ball entity
	Entity ball(ballBitmap, 15, 15, 0, 0); 

	while(1) {
		//clear frame buffer
		clearScreen(frameBuffer);


		//check inputs
		if(!gpio_get(LEFT_BUTTON)) {
			ball.setVelocity(-1, 0);
		} else if(!gpio_get(RIGHT_BUTTON)) {
			ball.setVelocity(1, 0);
		} else if(!gpio_get(UP_BUTTON)) {
			ball.setVelocity(0, -1);
		} else {
			ball.setVelocity(0, 1);
		}

		//draw ball to frame buffer
		ball.draw(frameBuffer);

		//update ball position
		ball.updatePosn();

		//fps counter
		frameBufferDrawText(frameBuffer, fpsCounter(), 3, 3, ST7735_WHITE);	

		//update screen with frame buffer
		updateScreen(frameBuffer); 
	}

}


/*!
	@brief  FPS counter
	@return char pointer to string containing fps
	@note printStr is static, so it can be safely returned, however it will be overwritten on next call,
	so it should be used immediately. This is not thread safe.

*/
char* fpsCounter(void) {
	static int t0 = 0, t1 = 0, fps = 0, frameTime = 0;
	static char printStr[100];

	t1 = to_ms_since_boot(get_absolute_time());
	frameTime = t1 - t0;
	fps = 1000 / frameTime;
	t0 = t1;
	sprintf(printStr,"FPS: %d", fps);
	return printStr;
}